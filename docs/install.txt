WebPasswordSafe Installation Instructions

To build and install from source:

1. Requirements:
	a. Java SE JDK 6.0 +
	b. Java Servlet Container (i.e. Apache Tomcat 5.5+)
	c. JDBC compatible RDBMS (i.e. MySQL 5.x)
	d. Maven 2.2.x

2. Download WebPasswordSafe project source via SVN (http://code.google.com/p/webpasswordsafe/source/checkout) to new directory "webpasswordsafe"

3. Install 3rd party JAR files locally that aren't in public Maven repositories (you'll need to download them yourself):
    a. ExtGWT 2.2.1 (http://www.sencha.com/products/gwt/thank-you.php?dl=extgwt221gwt2)
        mvn install:install-file -DgroupId=com.extjs -DartifactId=gxt -Dversion=2.2.1 -Dpackaging=jar -Dfile=gxt.jar
    b. GWT-SL 1.0 (http://gwt-widget.sourceforge.net/) WAR file
        mvn install:install-file -DgroupId=net.sf.gwt-widget -DartifactId=gwt-sl -Dversion=1.0 -Dpackaging=jar -Dfile=gwt-sl-1.0.jar
        mvn install:install-file -DgroupId=trove -DartifactId=trove -Dversion=2.0.4 -Dpackaging=jar -Dfile=trove-2.0.4.jar
   Optional only:
    c. OWASP ESAPI Java EE 2.0 rc6 (http://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API#tab=Java_EE)
        mvn install:install-file -DgroupId=org.owasp -DartifactId=esapi -Dversion=2.0-rc6 -Dpackaging=jar -Dfile=ESAPI-2.0_rc6.jar
    d. RSA SecurID AuthAgent 8.1.0 (http://www.rsa.com/node.aspx?id=1174)
        mvn install:install-file -DgroupId=com.rsa.authagent -DartifactId=authapi -Dversion=8.1.0 -Dpackaging=jar -Dfile=authapi.jar

4. Copy contents of ExtGWT's GXT/resources directory into webpasswordsafe/war/gxt/

5. Edit webpasswordsafe/war/WEB-INF/jdbc.properties changing values specific to your environment

6. Encryption configuration (only do this once, if these settings are changed after deployment data will become unreadable)
    a. If using Jasypt for encryption...
        i. Edit webpasswordsafe/war/WEB-INF/webpasswordsafe-data.xml and uncomment the appropriate lines for Jasypt Encryption and comment out the OWASP-ESAPI lines
        ii. Edit webpasswordsafe/war/WEB-INF/encryption.properties and verify encryptor.jasypt.* values
        iii. At the very least change encryptor.jasypt.password to a key/passphrase value unique to your environment
    b. If using ESAPI for encryption...
        i. Edit webpasswordsafe/war/WEB-INF/webpasswordsafe-data.xml and uncomment the appropriate lines for OWASP-ESAPI Encryption and comment out the Jasypt lines
        ii. Copy the contents of your .esapi resources directory into webpasswordsafe/src/main/resources/esapi or if directory is kept outside the web application,
            edit webpasswordsafe/war/WEB-INF/encryption.properties and change encryptor.esapi.useClasspath=false and encryptor.esapi.resourceDir=<full path to directory>
        iii. Edit ESAPI.properties and verify all of the Encryptor.* values, notably EncryptionKeyLength (128 or 256) and MasterKey and MasterSalt values
        iv. Generate new MasterKey and MasterSalt values by invoking from the webpasswordsafe directory:
            mvn exec:java -Dexec.mainClass="org.owasp.esapi.reference.crypto.JavaEncryptor" -Dexec.classpathScope=runtime -Dorg.owasp.esapi.resources=src/main/resources/esapi

7. Run "mvn clean package" from the webpasswordsafe directory

8. Verify your specific JDBC JAR file is in your J2EE server's appropriate shared classpath directory.

9. Verify you have Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files installed for your J2EE server's Java VM.

10. Deploy the WAR file generated in webpasswordsafe/target to your J2EE server (Tomcat) as WebPasswordSafe.war
    a. It is recommended you configure your web server to only accept SSL connections for this application

11. Connect to URL https://host:port/WebPasswordSafe/ using default login and password "admin"/"admin"

12. Change default admin password, create new users and begin using, you are done!
